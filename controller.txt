#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ManterClasseObj.Data;
using ManterClasseObj.Model;
namespace ManterClasseObj.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClasseRicardoesController : ControllerBase
    {
        private readonly ManterClasseObjContext _context;
        public ClasseRicardoesController(ManterClasseObjContext context)
        {
            _context = context;
        }
        // GET: api/ClasseRicardoes
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ClasseRicardo>>> GetClasseRicardo()
        {
            return await _context.ClasseRicardo.ToListAsync();
        }
        // GET: api/ClasseRicardoes/5
        [HttpGet("{id}")]
        public async Task<ActionResult<ClasseRicardo>> GetClasseRicardo(int id)
        {
            var classeRicardo = await _context.ClasseRicardo.FindAsync(id);
            if (classeRicardo == null)
            {
                return NotFound();
            }
            return classeRicardo;
        }
        // PUT: api/ClasseRicardoes/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutClasseRicardo(int id, string descricao)
        {
            ClasseRicardo dado;
            if (id != 0)
            {
                dado = _context.ClasseRicardo.FirstOrDefault(x => x.Id == id);
                if (dado == null) return NotFound();
            }
            else
            {
                return BadRequest();
            }
            try
            {
                dado.Descricao = descricao;
                _context.ClasseRicardo.Update(dado);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ClasseRicardoExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            return NoContent();
        }
        [HttpPut("{id}/status")]
        public async Task<IActionResult> PutClasseStatusRicardo(int id)
        {
            ClasseRicardo dado;
            if (id != 0)
            {
                dado = _context.ClasseRicardo.FirstOrDefault(x => x.Id == id);
                if (dado == null) return NotFound();
            }
            else
            {
                return BadRequest();
            }
            try
            {
                dado.Ativo = !dado.Ativo;
                _context.ClasseRicardo.Update(dado);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ClasseRicardoExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            return NoContent();
        }
            // POST: api/ClasseRicardoes
            // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
            [HttpPost]
        public async Task<ActionResult<ClasseRicardo>> PostClasseRicardo(ClasseRicardo classeRicardo)
        {
            _context.ClasseRicardo.Add(classeRicardo);
            await _context.SaveChangesAsync();
            return CreatedAtAction("GetClasseRicardo", new { id = classeRicardo.Id }, classeRicardo);
        }
        // DELETE: api/ClasseRicardoes/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteClasseRicardo(int id)
        {
            var classeRicardo = await _context.ClasseRicardo.FindAsync(id);
            if (classeRicardo == null)
            {
                return NotFound();
            }
            _context.ClasseRicardo.Remove(classeRicardo);
            await _context.SaveChangesAsync();
            return NoContent();
        }
        private bool ClasseRicardoExists(int id)
        {
            return _context.ClasseRicardo.Any(e => e.Id == id);
        }
    }
}